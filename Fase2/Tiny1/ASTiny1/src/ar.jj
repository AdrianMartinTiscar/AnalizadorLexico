options  {
  STATIC=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny1)
package asint;

public class AnalizadorSintacticoTiny1 {}
PARSER_END(AnalizadorSintacticoTiny1)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo>>}
  TOKEN:{<#parteExponencial: (["E","e"])(["+","-"]) <parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN: {<pint:"int">}
  TOKEN: {<real:"real">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<ptrue:"true">}
  TOKEN: {<pfalse:"false">}
  TOKEN: {<string:"string">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN: {<pnull:"null">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<pif:"if">}
  TOKEN: {<then:"then">}
  TOKEN: {<pelse:"else">}
  TOKEN: {<endif:"endif">}
  TOKEN: {<pwhile:"while">}
  TOKEN: {<pdo:"do">}
  TOKEN: {<endwhile:"endwhile">}
  TOKEN: {<call:"call">}
  TOKEN: {<record:"record">}
  TOKEN: {<array:"array">}
  TOKEN: {<of:"of">}
  TOKEN: {<pointer:"pointer">}
  TOKEN: {<pnew:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<var:"var">}
  TOKEN: {<type:"type">}
  TOKEN: {<Separacion:"&&">}
  TOKEN: {<PtoComa:";">}
  TOKEN:{<id:<letra>(<letra>|<digito>|"_")*>}
  TOKEN:{<Nentero: (["+","-"])? <parteEntera> >}
  TOKEN:{<Nreal: (["+","-"])? <parteEntera> ("." <parteDecimal>)?(<parteExponencial>)? >  }
  TOKEN:{<literalCad:"\""(~["\n","\t","\b","\r"])*"\"">}

  void Programa()  : {} {Decs() <Separacion> Instrs() <EOF> | Instrs()}
  void Decs() : {} {Dec() restoDec()}
  void restoDec() : {} {<PtoComa> Decs() | {}}
  void Dec() : {} {<var> tipo() <id> | <type> tipo() <id> | <proc> <id> paramForm() bloque()}
  void paramForm() : {} {"(" paramFormD() LparamForm() ")"}
  void paramFormD() : {} { tipo() restParamFormD()}
  void restParamFormD(): {} {"&" <id> | <id>}
  void LparamForm() : {} {"," paramFormD() LparamForm() | {}}
  void bloque() : {} {"{" Programa() "}"}
  void tipoBas() : {} {<pint> | <bool> | <real> | <string>}
  void tipo() : {} {tipoBas() | tarray() | trecord() | tpointer() | <id>}
  void tarray(): {} {<array> "[" <Nentero> "]" <of> tipo()}
  void trecord() : {} {<record> "{" campo() campos() "}"}
  void campos() : {} {<PtoComa> campo() campos() | {}}
  void campo() : {} {tipo() <id>}
  void tpointer(): {} {<pointer> tipo()}
  void Instrs(): {} {Instr() restoIns()}
  void restoIns(): {} {<PtoComa> Instrs() | {}}
  void Instr(): {} {expr() "=" expr() | <pif> expr() <then> instrOp() restoIf() | <pwhile> expr() <pdo> instrOp() <endwhile> | <read> expr() | <write> expr() | <nl> | <pnew> expr() | <delete> expr() | <call> <id> parReales() | bloque()}
  void restoIf(): {} {<endif> | <pelse> instrOp() <endif>}
  void instrOp(): {} {Instr() listains() | {}}
  void listains(): {} {<PtoComa> Instr() listains() | {}}
  void parReales(): {} {"(" ExpresionesOp() ")"}
  void ExpresionesOp(): {} {expr() LExpresiones() | {}}
  void LExpresiones(): {} {"," expr() LExpresiones() | {}}
  void expr(): {} {<Nentero> | <Nreal> | <id> | <pnull> | <literalCad> | <ptrue> | <pfalse> | E0()}
  void E0(): {} {E1() restoE0()}
  void restoE0(): {} {"-" E1() | "+" E0() | {}}
  void E1(): {} {E2() Rest2E1()}
  void Rest2E1(): {} {op1AI() E2() Rest2E2() | {}}
  void E2(): {} {E3() Rest2E2()}
  void Rest2E2(): {} {op2AI() E3() Rest2E2() | {}}
  void E3(): {} {E4() restE3() | {}}
  void restE3(): {} {op3NA() E4()}
  void E4(): {} {E5() | <not> E4() | E5()}
  void E5(): {} {E6() Resto2E5()}
  void Resto2E5(): {} {RestoE5() Resto2E5() | {}}
  void RestoE5(): {} {"[" expr() "]" | "." <id> | "->" <id>}
  void E6(): {} {"*" E6() | E7()}
  void E7(): {} {"(" E0() ")"}
  void op1AI(): {} {<and> | <or>}
  void op2AI(): {} { ">" resto() | "<" resto()|"=" "=" | "!" "="}
  void resto(): {} {"=" | {}}
  void op3NA(): {} {"*" | "/" | "%"}

