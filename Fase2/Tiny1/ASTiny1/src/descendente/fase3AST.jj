options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST1)
package descendente;

import procesamiento.TinyASint.Exp;
import procesamiento.TinyASint.Dec;
import procesamiento.TinyASint.Decs;
import procesamiento.TinyASint.Prog;
import procesamiento.TinyASint.Inst;
import procesamiento.TinyASint.Insts;
import procesamiento.TinyASint.Tipo;
import procesamiento.TinyASint.ParamForm;
import procesamiento.TinyASint.LParamForm;
import procesamiento.TinyASint.ParamD;
import procesamiento.TinyASint.Campo;
import procesamiento.TinyASint.Campos;
import procesamiento.TinyASint.ParReales;
import procesamiento.TinyASint.LExpresiones;
import procesamiento.TinyASint.StringLocalizado;
import procesamiento.TinyASint.InstrOp;
import procesamiento.SemOps;

public class ConstructorAST1 {
	private SemOps sem = new SemOps();
}


PARSER_END(ConstructorAST1)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: ((<digito>)* <digitoPositivo>) | "0">}
  TOKEN:{<#parteExponencial: (["E","e"])(["+","-"]) <parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN: {<pint:"int">}
  TOKEN: {<real:"real">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<ptrue:"true">}
  TOKEN: {<pfalse:"false">}
  TOKEN: {<string:"string">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN: {<pnull:"null">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<pif:"if">}
  TOKEN: {<then:"then">}
  TOKEN: {<pelse:"else">}
  TOKEN: {<endif:"endif">}
  TOKEN: {<pwhile:"while">}
  TOKEN: {<pdo:"do">}
  TOKEN: {<endwhile:"endwhile">}
  TOKEN: {<call:"call">}
  TOKEN: {<record:"record">}
  TOKEN: {<array:"array">}
  TOKEN: {<of:"of">}
  TOKEN: {<pointer:"pointer">}
  TOKEN: {<pnew:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<var:"var">}
  TOKEN: {<type:"type">}
  TOKEN: {<Separacion:"&&">}
  TOKEN: {<PtoComa:";">}
  TOKEN: {<asig:"=">}
  TOKEN: {<equiv:"==">}
  TOKEN: {<mas: "+">}
  TOKEN: {<menos: "-">}
  TOKEN:{<id:<letra>(<letra>|<digito>|"_")*>}
  TOKEN:{<Nentero: (["+","-"])? <parteEntera> >}
  TOKEN:{<Nreal: (["+","-"])? <parteEntera> ("." <parteDecimal>)?(<parteExponencial>)? >  }
  TOKEN:{<literalCad:"\""(~["\n","\t","\b","\r"])*"\"">}

  Prog ProgramaPrev() : {Prog prog;} {prog=Programa() <EOF> {return prog;}}
  Prog Programa() : {Decs decs; Insts instrs;}
					{decs=Decs() <Separacion> instrs=Insts() {return sem.programa_conDecs(decs, instrs);} |
					 instrs=Insts() {return sem.programa_sinDecs(instrs);}}
  Decs Decs() : {Dec dec; Decs restDec;}
				{dec=Dec() restDec=restoDec(dec) {return restDec;}}
  Decs restoDec(Dec dec) : {Decs decs;}
						   {<PtoComa> decs=Decs() {return sem.declaracion_varias(dec, decs);} |
						   {return sem.declaracion_una(dec);}}
  Dec Dec() : {Token d; Tipo tipo; StringLocalizado t; ParamForm param; Prog bloque;}
			  {d=<var> tipo=Tipo() t=<id> {return sem.dec_habitual(tipo, t);} |
			   d=<type> tipo=Tipo() t=<id> {return sem.dec_type(tipo, t);} |
			   d=<proc> t=<id> param=paramForm() bloque=bloque() {return sem.dec_proc(t, param, bloque);}}
  ParamForm paramForm() : {ParamD paramD; LParamForm paramL;} 
					  {"(" paramD=paramFormD() paramL=LparamForm() ")" {return sem.param_formAux(paramD, paramL);}} 
  ParamD paramFormD() : {Tipo tipo; ParamForm restparam;}
					   {tipo=Tipo() restparam=restParamFormD(tipo) {return restparam;} |
					   {return null;}}
  ParamForm restParamFormD(Tipo tipo) : {Token t;}
									 {"&" t=<id> {return sem.ParamDAmp(tipo, t);} |
									  t=<id> {return sem.ParamD(tipo, t);}} 
  ParamForm LparamForm() : {ParamForm param; ParamForm paramL;}
					   {"," paramD=paramFormD() paramL=LparamForm() {return param_formAux(paramD, paramL);} |
					   {return null;}}
  Bloque bloque() : {Prog programa;}
				  {"(" programa=Programa() ")" {return programa;}}
  Tipo tipoBas() : {}
				   {<pint> {return intt();} |
				   <bool> {return boolt();} |
				   <real> {return realt();} |
				   <string> {return stringt();}}
  Tipo Tipo() : {Tipo t;}
				{t=tipoBas() {return t;} |
				 t=tarray() {return t;} |
				 t=trecord() {return t;} |
				 t=tpointer() {return t;} |
				 t=<id> {return t;}}
  Tipo tarray() : {Token array; NEntero num; Tipo tipo;}
				  {array=<id> "[" num=<Nentero> "]" <of> tipo=Tipo() {return sem.tArray(num, tipo);}}
  Tipo trecord() : {Campo campo; Campos campos;}
				   {<record> "(" campo=campo() campos=campos() ")" {return sem.trecordAux(campo, campos);}}
  Campos campos() : {Campo campo; Campos campos;}
				  {<PtoComa> campo=campo() campos=campos() {return sem.campos(campo, campos);} |
				  {return null;}}
  Campo campo() : {Tipo t; StringLocalizado i;}
				 {t=Tipo() i=<id> {return sem.campo(t, i);}}
  Tipo tpointer() : {Tipo t;}
					{<pointer> t=Tipo() {return sem.tPointer(t);}} 
  Insts Insts() : {Inst instr; Insts restoins;}
                    {instr=Inst() restoins=restoIns(instr) {return restoins;}}
  Insts restoIns(Inst instr) : {Insts instrs;}
								 {<PtoComa> instrs=Insts()  {return sem.instruccion_varias(instr, instrs);} |
								 {return sem.instruccion_una(instr);}}
  Inst Inst() : {Exp ex1; Exp ex2; InstrOp op1; InstrOp op2; StringLocalizado i; ParReales par; Bloque blo; Insts res;}
				  {ex1=expr() "=" ex2=expr() {return sem.instuccion_asig(ex1, ex2);} |
				   <pif> ex1=expr() <then> op1=InstrOp() res=restoIf(ex1, op1) {return res;} |
				   <pwhile> ex1=expr() <pdo> op1=InstrOp() <endwhile> {return sem.instruccion_while(ex1, op1);} |
				   <read> ex1=expr() {return sem.instruccion_read(ex1);} |
				   <write> ex1=expr() {return sem.instruccion_write(ex1);} |
				   <nl> {return sem.instruccion_nl();} |
				   <pnew> ex1=expr() {return sem.instruccion_new(ex1);} |
				   <delete> ex1=expr() {return sem.instruccion_delete(ex1);} |
				   <call> i=<id> par=parReales() {return sem.instruccion_call(i, par);} |
				   blo=bloque() {return sem.instruccion_bloque(blo);}}
  InstrOp InstrOp() : {Inst inst; Insts instrs;}
						{inst=Inst() instrs=Insts() {return sem.instrOpAux(inst, instrs);} |
						{return null;}}
  Inst restoIf(Exp e, InstrOp op1) : {InstrOp op2;}
									   {<endif> {return sem.instruccion_ifAux(e, op1);} |
									    <pelse> op2=InstrOp() <endif> {return sem.instruccion_ifelseAux(e, op1, op2);}} 
  ParReales parReales() : {ParReales p;}
						  {"(" p=restoPaRe() {return p;}}
  ParReales restoPaRe() : {Exp ex; LExpresiones lexp;}
						  {ex=expr() lexp=lExpresiones() ")" {return sem.parRealesAux(ex, lexp);} |
						  ")" {return sem.parRealesAux(null, null);}}
  LExpresiones lExpresiones() : {Exp ex; LExpresiones lexp;}
								{"," ex=expr() lexp=lExpresiones() {return sem.lExpresionesAux(ex, lexp);} |
								{return null;}}
  Exp expr() : {Exp ex;}
			   {ex=E0() {return ex;}}
  Exp E0() : {Exp e1; Exp res;}
			 {e1=E1() res=restoE0(e1) {return res;}}
  Exp restoE0(Exp e1) : {Exp ev;}
						{<menos> ev=E1() {return sem.resta(e1, ev);} |
						 <mas> ev=E0() {return sem.suma(e1, ev);} |
						{return e1;}}
  Exp E1() : {Exp e2; Exp res;}
			 {e2=E2() res=rest2E1(e2) {return res;}}
  Exp rest2E1(Exp e2) : {String op; Exp ev; Exp res;}
					{op=op1AI() ev=E2() res=rest2E1(ev) {return sem.exp(op, e2, res);} |
					{return e2;}}
  Exp E2() : {Exp e3; Exp res;}
			 {e3=E3() res=rest2E2(e3) {return res;}}
  Exp rest2E2(Exp e3) : {String op; Exp ev; Exp res;}
					{op=op2AI() ev=E3() res=rest2E2(ev) {return sem.exp(op, e3, res);} |
					{return e3;}}
  Exp E3() : {Exp e4; Exp res;}
			 {e4=E4() res=restE3(e4) {return res;}}
  Exp restE3(Exp e4) : {char op; Exp ev; Exp res;}
					{op=op3NA() ev=E4() res=restE3(ev) {return sem.exp(op, e4, res);} |
					{return e4;}}
  Exp E4() : {Exp e;}
			 {<menos> e=E5() {return sem.neg(e);} |
			  <not> e=E4() {return sem.not(e);} |
			  e=E5() {return e;}}
  Exp E5() : {Exp e6; Exp res;}
			 {e6=E6() res=Resto2E5(e6) {return res;}}			 
  Exp Resto2E5(Exp e6) : {Exp res; Exp res2; Exp rese5;}
						 {res=RestoE5(e6) res2=Resto2E5(res) {return res2;} |
						 {return e6;}}
  Exp RestoE5(Exp res) : {Exp e; StringLocalizado i;}
						 {"[" e=expr() "]" {return sem.indice(res, e);} |
						  "." i=<id> {return sem.punto(res, i);} |
						  "->" i=<id> {return sem.flecha(res, i);}}  
  Exp E6() : {Exp ev;}
			 {"*" ev=E6() {return sem.indir(ev);} |
			  ev=E7() {return ev;}}
  Exp E7() : {Token e;}
			 {"(" e=E0() ")" {return e;} |
			  e=<Nentero> {return e;} |
			  e=<Nreal> {return e;} |
			  e=<ptrue> {return e;} |
			  e=<pfalse> {return e;} |
			  e=<pnull> {return e;} |
			  e=<literalCad> {return e;} |
			  e=<id> {return e;}}
  String op1AI() : {}
				   {<and> {return "and";} |
				    <or> {return "or";}}
  String op2AI() : {String res;}
				   {">" res=resto(">") {return res;}
				    "<" res=resto("<") {return res;}}
  String resto(String m) : {}
						 {"=" {return (m+"=");} |
						 {return m;}}
  char op3NA() : {}
				 {"*" {return '*';} |
				  "/" {return '/';} |
				  "%" {return '%';}}