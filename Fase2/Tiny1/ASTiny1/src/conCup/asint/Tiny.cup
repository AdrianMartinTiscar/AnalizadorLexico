package conCup.asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     INT, REAL, BOOL, STRING, AND, OR, NOT, NULL, TRUE, FALSE, PROC, IF, THEN, ELSE,
             ENDIF, WHILE, DO, ENDWHILE, CALL, RECORD, PARRAY, OF, POINTER, NEW, DELETE, READ, WRITE,
             NL, VAR, TYPE, ID, NENTERO, NREAL, LITCAD, SEPARACION, SUMA, RESTA, MUL, DIV, MEN, MAY,
             MENEQ, MAYEQ, EQUIV, DIST, PAP, PCIE, PTOCOMA, IGUAL, COMA, PORC, CORAP, CORCIE, LLAP,
             LLCIE, PNTO, FLECHA, AMP, IGN, COM;


non terminal  Programa, Decs, restoDec, Dec, paramForm, paramFormD, restParamFormD, LparamForm, bloque,
              tipoBas, tipo, tarray, trecord, campos, campo, tpointer, Instrs, restoIns, Instr, InstrOp,
              restoIf, parReales, ExpresionesOp, LExpresiones, expr, E0, restoE0, E1, Rest2E1,
              E2, Rest2E2, E3, restE3, E4, E5, Resto2E5, RestoE5, E6, E7, op1AI, op2AI, resto, op3NA;

Programa ::= Decs SEPARACION Instrs | Instrs ;

Decs ::= Dec restoDec ;
restoDec ::= PTOCOMA Decs | ;

Dec ::= VAR tipo ID | TYPE tipo ID | PROC ID paramForm bloque ;
paramForm ::= PAP paramFormD LparamForm PCIE ;
paramFormD ::= tipo restParamFormD ;
restParamFormD ::= AMP ID | ID ;

LparamForm ::= COMA paramFormD LparamForm | ;
bloque ::= LLAP Programa LLCIE ;

tipoBas ::= INT | BOOL | REAL | STRING ;
tipo  ::= tipoBas | tarray | trecord | tpointer | ID ;
tarray ::= PARRAY CORAP NENTERO CORCIE OF tipo ;
trecord ::= RECORD LLAP campo campos LLCIE ;
campos ::= PTOCOMA campo campos | ;
campo ::= tipo ID ;
tpointer ::= POINTER tipo ;

Instrs ::= Instr restoIns ;
restoIns ::= PTOCOMA Instrs | ;

Instr ::= ID IGUAL expr | IF expr THEN InstrOp restoIf | WHILE expr DO InstrOp ENDWHILE | READ expr | WRITE expr | NL | NEW expr |
        DELETE expr | CALL ID parReales | bloque ;
InstrOp ::= Instr restoIns | ;
restoIf ::= ENDIF | ELSE Instrs ENDIF ;
parReales ::= PAP ExpresionesOp PCIE ;
ExpresionesOp ::= expr LExpresiones | ;
LExpresiones ::= COMA expr LExpresiones | ;

expr ::= E0 ;

E0 ::= E1 restoE0 ;
restoE0 ::= RESTA E1 restoE0 | SUMA E0 | ;

E1 ::= E2 Rest2E1 ;
Rest2E1 ::= op1AI E2 Rest2E1 | ;

E2 ::= E3 Rest2E2 ;
Rest2E2 ::= op2AI E3 Rest2E2 | ;

E3 ::= E4 restE3 ;
restE3 ::= op3NA E4 restE3 | ;

E4 ::= RESTA E5 | NOT E4 | E5 ;

E5 ::= E6 Resto2E5 ;
Resto2E5 ::= RestoE5 Resto2E5 | ;
RestoE5 ::= CORAP expr CORCIE | PNTO ID | FLECHA ID ;

E6 ::= MUL E6 | E7 ;
E7 ::= PAP E0 PCIE | NENTERO | NREAL | ID | NULL | LITCAD | TRUE | FALSE ;

op1AI ::= AND | OR ;

op2AI ::= MAY | MEN | EQUIV | DIST | MENEQ | MAYEQ;

op3NA ::= MUL | DIV | PORC;



