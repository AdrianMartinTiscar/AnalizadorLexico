
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 22 14:12:54 CEST 2021
//----------------------------------------------------

package conCup.asint;

import java_cup.runtime.*;
import conCup.alex.AnalizadorLexicoTiny;
import conCup.alex.UnidadLexica;
import conCup.errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 22 14:12:54 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\006\000" +
    "\002\006\006\000\002\007\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\005\000\002\011\002\000\002\012" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\010\000\002\016\007\000\002\017\005\000\002\017" +
    "\002\000\002\020\004\000\002\021\004\000\002\022\004" +
    "\000\002\023\004\000\002\023\002\000\002\024\005\000" +
    "\002\024\007\000\002\024\007\000\002\024\004\000\002" +
    "\024\004\000\002\024\003\000\002\024\004\000\002\024" +
    "\004\000\002\024\005\000\002\024\003\000\002\025\003" +
    "\000\002\025\005\000\002\026\005\000\002\027\004\000" +
    "\002\027\002\000\002\030\005\000\002\030\002\000\002" +
    "\031\003\000\002\032\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\002\000\002\034\004\000\002\035\005" +
    "\000\002\035\002\000\002\036\004\000\002\037\005\000" +
    "\002\037\002\000\002\040\004\000\002\041\005\000\002" +
    "\041\002\000\002\042\004\000\002\042\004\000\002\042" +
    "\003\000\002\043\004\000\002\044\004\000\002\044\002" +
    "\000\002\045\005\000\002\045\004\000\002\045\004\000" +
    "\002\046\004\000\002\046\003\000\002\047\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\050\003\000\002\050\003\000\002\051\004\000" +
    "\002\051\004\000\002\051\003\000\002\051\003\000\002" +
    "\052\003\000\002\052\002\000\002\053\003\000\002\053" +
    "\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\034\016\020\017\013\023\007\026\006\033" +
    "\022\034\023\035\004\036\014\037\025\040\026\041\017" +
    "\042\015\071\021\001\002\000\030\012\071\013\110\014" +
    "\075\015\107\042\100\043\072\044\067\045\104\050\112" +
    "\051\111\061\106\001\002\000\016\002\uffe0\021\uffe0\022" +
    "\uffe0\025\uffe0\063\247\072\uffe0\001\002\000\004\042\235" +
    "\001\002\000\030\012\071\013\110\014\075\015\107\042" +
    "\100\043\072\044\067\045\104\050\112\051\111\061\106" +
    "\001\002\000\004\046\227\001\002\000\006\002\uffff\072" +
    "\uffff\001\002\000\016\002\uffd6\021\uffd6\022\uffd6\025\uffd6" +
    "\063\uffd6\072\uffd6\001\002\000\030\012\071\013\110\014" +
    "\075\015\107\042\100\043\072\044\067\045\104\050\112" +
    "\051\111\061\106\001\002\000\030\012\071\013\110\014" +
    "\075\015\107\042\100\043\072\044\067\045\104\050\112" +
    "\051\111\061\106\001\002\000\004\064\214\001\002\000" +
    "\004\002\213\001\002\000\022\004\027\005\040\006\033" +
    "\007\036\027\034\030\043\032\041\042\037\001\002\000" +
    "\004\042\172\001\002\000\034\016\020\017\013\023\007" +
    "\026\006\033\022\034\023\035\004\036\014\037\025\040" +
    "\026\041\017\042\015\071\021\001\002\000\030\012\071" +
    "\013\110\014\075\015\107\042\100\043\072\044\067\045" +
    "\104\050\112\051\111\061\106\001\002\000\030\012\071" +
    "\013\110\014\075\015\107\042\100\043\072\044\067\045" +
    "\104\050\112\051\111\061\106\001\002\000\006\046\ufffc" +
    "\063\064\001\002\000\016\002\uffda\021\uffda\022\uffda\025" +
    "\uffda\063\uffda\072\uffda\001\002\000\022\004\027\005\040" +
    "\006\033\007\036\027\034\030\043\032\041\042\037\001" +
    "\002\000\006\042\ufff1\075\ufff1\001\002\000\006\042\uffed" +
    "\075\uffed\001\002\000\006\042\uffea\075\uffea\001\002\000" +
    "\006\042\uffec\075\uffec\001\002\000\006\042\ufff0\075\ufff0" +
    "\001\002\000\004\071\053\001\002\000\006\042\uffeb\075" +
    "\uffeb\001\002\000\006\042\uffee\075\uffee\001\002\000\006" +
    "\042\uffe9\075\uffe9\001\002\000\006\042\uffef\075\uffef\001" +
    "\002\000\022\004\027\005\040\006\033\007\036\027\034" +
    "\030\043\032\041\042\037\001\002\000\004\042\051\001" +
    "\002\000\004\067\044\001\002\000\004\043\045\001\002" +
    "\000\004\070\046\001\002\000\004\031\047\001\002\000" +
    "\022\004\027\005\040\006\033\007\036\027\034\030\043" +
    "\032\041\042\037\001\002\000\006\042\uffe8\075\uffe8\001" +
    "\002\000\006\046\ufffb\063\ufffb\001\002\000\006\042\uffe3" +
    "\075\uffe3\001\002\000\022\004\027\005\040\006\033\007" +
    "\036\027\034\030\043\032\041\042\037\001\002\000\004" +
    "\042\063\001\002\000\006\063\056\072\uffe5\001\002\000" +
    "\022\004\027\005\040\006\033\007\036\027\034\030\043" +
    "\032\041\042\037\001\002\000\004\072\060\001\002\000" +
    "\006\042\uffe7\075\uffe7\001\002\000\006\063\056\072\uffe5" +
    "\001\002\000\004\072\uffe6\001\002\000\006\063\uffe4\072" +
    "\uffe4\001\002\000\010\016\020\040\026\041\017\001\002" +
    "\000\004\046\ufffe\001\002\000\004\046\ufffd\001\002\000" +
    "\064\002\uffb3\010\uffb3\011\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\024\uffb3\025\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\070\uffb3\072\uffb3\073\uffb3\074\uffb3\001" +
    "\002\000\016\002\uffd8\021\uffd8\022\uffd8\025\uffd8\063\uffd8" +
    "\072\uffd8\001\002\000\030\012\071\013\110\014\075\015" +
    "\107\042\100\043\072\044\067\045\104\050\112\051\111" +
    "\061\106\001\002\000\064\002\uffb4\010\uffb4\011\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\057\uffb4\060\uffb4\062" +
    "\uffb4\063\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\001\002\000\064\002\uffb6\010\uffb6\011" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\057\uffb6\060" +
    "\uffb6\062\uffb6\063\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\001\002\000\064\002\uffbb\010" +
    "\uffbb\011\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\057" +
    "\uffbb\060\uffbb\062\uffbb\063\uffbb\065\uffbb\066\uffbb\067\157" +
    "\070\uffbb\072\uffbb\073\160\074\154\001\002\000\064\002" +
    "\uffaf\010\uffaf\011\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\072\uffaf\073\uffaf\074\uffaf\001\002\000" +
    "\056\002\uffbe\010\uffbe\011\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\025\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\065\uffbe" +
    "\066\uffbe\070\uffbe\072\uffbe\001\002\000\056\002\uffc1\010" +
    "\uffc1\011\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1" +
    "\047\uffc1\050\uffc1\051\147\052\150\053\uffc1\054\uffc1\057" +
    "\uffc1\060\uffc1\062\uffc1\063\uffc1\065\uffc1\066\145\070\uffc1" +
    "\072\uffc1\001\002\000\064\002\uffb2\010\uffb2\011\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\060\uffb2\062" +
    "\uffb2\063\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\072\uffb2" +
    "\073\uffb2\074\uffb2\001\002\000\050\002\uffc4\010\uffc4\011" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\047\uffc4" +
    "\050\uffc4\053\134\054\135\057\132\060\133\062\uffc4\063" +
    "\uffc4\065\uffc4\070\uffc4\072\uffc4\001\002\000\040\002\uffc7" +
    "\010\125\011\127\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025" +
    "\uffc7\047\uffc7\050\uffc7\062\uffc7\063\uffc7\065\uffc7\070\uffc7" +
    "\072\uffc7\001\002\000\034\002\uffca\020\uffca\021\uffca\022" +
    "\uffca\024\uffca\025\uffca\047\121\050\117\062\uffca\063\uffca" +
    "\065\uffca\070\uffca\072\uffca\001\002\000\064\002\uffb0\010" +
    "\uffb0\011\uffb0\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\057" +
    "\uffb0\060\uffb0\062\uffb0\063\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\072\uffb0\073\uffb0\074\uffb0\001\002\000\030\002" +
    "\uffce\020\uffce\021\uffce\022\uffce\024\uffce\025\uffce\062\uffce" +
    "\063\uffce\065\uffce\070\uffce\072\uffce\001\002\000\030\012" +
    "\071\013\110\014\075\015\107\042\100\043\072\044\067" +
    "\045\104\050\112\051\111\061\106\001\002\000\064\002" +
    "\uffae\010\uffae\011\uffae\020\uffae\021\uffae\022\uffae\024\uffae" +
    "\025\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\057\uffae\060\uffae\062\uffae\063\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\072\uffae\073\uffae\074\uffae\001\002\000" +
    "\064\002\uffb1\010\uffb1\011\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\024\uffb1\025\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\057\uffb1\060\uffb1\062\uffb1\063\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\072\uffb1\073\uffb1\074\uffb1\001" +
    "\002\000\024\013\110\014\075\015\107\042\100\043\072" +
    "\044\067\045\104\051\111\061\106\001\002\000\024\013" +
    "\110\014\075\015\107\042\100\043\072\044\067\045\104" +
    "\051\111\061\106\001\002\000\056\002\uffc0\010\uffc0\011" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\057\uffc0\060" +
    "\uffc0\062\uffc0\063\uffc0\065\uffc0\066\uffc0\070\uffc0\072\uffc0" +
    "\001\002\000\064\002\uffb7\010\uffb7\011\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\057\uffb7\060\uffb7\062\uffb7\063" +
    "\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\001\002\000\004\062\116\001\002\000\064\002" +
    "\uffb5\010\uffb5\011\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5" +
    "\025\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\057\uffb5\060\uffb5\062\uffb5\063\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\072\uffb5\073\uffb5\074\uffb5\001\002\000" +
    "\030\012\071\013\110\014\075\015\107\042\100\043\072" +
    "\044\067\045\104\050\112\051\111\061\106\001\002\000" +
    "\030\002\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd" +
    "\062\uffcd\063\uffcd\065\uffcd\070\uffcd\072\uffcd\001\002\000" +
    "\030\012\071\013\110\014\075\015\107\042\100\043\072" +
    "\044\067\045\104\050\112\051\111\061\106\001\002\000" +
    "\030\002\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb" +
    "\062\uffcb\063\uffcb\065\uffcb\070\uffcb\072\uffcb\001\002\000" +
    "\030\002\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc" +
    "\062\uffcc\063\uffcc\065\uffcc\070\uffcc\072\uffcc\001\002\000" +
    "\034\002\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9" +
    "\047\uffc9\050\uffc9\062\uffc9\063\uffc9\065\uffc9\070\uffc9\072" +
    "\uffc9\001\002\000\030\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\050\uffad\051\uffad\061" +
    "\uffad\001\002\000\030\012\071\013\110\014\075\015\107" +
    "\042\100\043\072\044\067\045\104\050\112\051\111\061" +
    "\106\001\002\000\030\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\050\uffac\051\uffac\061" +
    "\uffac\001\002\000\040\002\uffc7\010\125\011\127\020\uffc7" +
    "\021\uffc7\022\uffc7\024\uffc7\025\uffc7\047\uffc7\050\uffc7\062" +
    "\uffc7\063\uffc7\065\uffc7\070\uffc7\072\uffc7\001\002\000\034" +
    "\002\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\047" +
    "\uffc8\050\uffc8\062\uffc8\063\uffc8\065\uffc8\070\uffc8\072\uffc8" +
    "\001\002\000\030\012\uffa9\013\uffa9\014\uffa9\015\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\050\uffa9\051\uffa9\061\uffa9" +
    "\001\002\000\030\012\uffa8\013\uffa8\014\uffa8\015\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\050\uffa8\051\uffa8\061\uffa8" +
    "\001\002\000\032\012\uffa6\013\uffa6\014\uffa6\015\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\050\uffa6\051\uffa6\061\uffa6" +
    "\064\142\001\002\000\032\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\050\uffa6\051\uffa6" +
    "\061\uffa6\064\142\001\002\000\040\002\uffc6\010\uffc6\011" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\047\uffc6" +
    "\050\uffc6\062\uffc6\063\uffc6\065\uffc6\070\uffc6\072\uffc6\001" +
    "\002\000\030\012\071\013\110\014\075\015\107\042\100" +
    "\043\072\044\067\045\104\050\112\051\111\061\106\001" +
    "\002\000\050\002\uffc4\010\uffc4\011\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\025\uffc4\047\uffc4\050\uffc4\053\134\054" +
    "\135\057\132\060\133\062\uffc4\063\uffc4\065\uffc4\070\uffc4" +
    "\072\uffc4\001\002\000\040\002\uffc5\010\uffc5\011\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\047\uffc5\050\uffc5" +
    "\062\uffc5\063\uffc5\065\uffc5\070\uffc5\072\uffc5\001\002\000" +
    "\030\012\uffa7\013\uffa7\014\uffa7\015\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\050\uffa7\051\uffa7\061\uffa7\001\002\000" +
    "\030\012\uffab\013\uffab\014\uffab\015\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\050\uffab\051\uffab\061\uffab\001\002\000" +
    "\030\012\uffaa\013\uffaa\014\uffaa\015\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\050\uffaa\051\uffaa\061\uffaa\001\002\000" +
    "\030\012\uffa3\013\uffa3\014\uffa3\015\uffa3\042\uffa3\043\uffa3" +
    "\044\uffa3\045\uffa3\050\uffa3\051\uffa3\061\uffa3\001\002\000" +
    "\050\002\uffc3\010\uffc3\011\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\057" +
    "\uffc3\060\uffc3\062\uffc3\063\uffc3\065\uffc3\070\uffc3\072\uffc3" +
    "\001\002\000\030\012\uffa5\013\uffa5\014\uffa5\015\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\050\uffa5\051\uffa5\061\uffa5" +
    "\001\002\000\030\012\uffa4\013\uffa4\014\uffa4\015\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\050\uffa4\051\uffa4\061\uffa4" +
    "\001\002\000\030\012\071\013\110\014\075\015\107\042" +
    "\100\043\072\044\067\045\104\050\112\051\111\061\106" +
    "\001\002\000\056\002\uffc1\010\uffc1\011\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\024\uffc1\025\uffc1\047\uffc1\050\uffc1\051\147" +
    "\052\150\053\uffc1\054\uffc1\057\uffc1\060\uffc1\062\uffc1\063" +
    "\uffc1\065\uffc1\066\145\070\uffc1\072\uffc1\001\002\000\050" +
    "\002\uffc2\010\uffc2\011\uffc2\020\uffc2\021\uffc2\022\uffc2\024" +
    "\uffc2\025\uffc2\047\uffc2\050\uffc2\053\uffc2\054\uffc2\057\uffc2" +
    "\060\uffc2\062\uffc2\063\uffc2\065\uffc2\070\uffc2\072\uffc2\001" +
    "\002\000\004\042\165\001\002\000\056\002\uffbd\010\uffbd" +
    "\011\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\057\uffbd" +
    "\060\uffbd\062\uffbd\063\uffbd\065\uffbd\066\uffbd\070\uffbd\072" +
    "\uffbd\001\002\000\064\002\uffbb\010\uffbb\011\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\024\uffbb\025\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\057\uffbb\060\uffbb\062\uffbb" +
    "\063\uffbb\065\uffbb\066\uffbb\067\157\070\uffbb\072\uffbb\073" +
    "\160\074\154\001\002\000\030\012\071\013\110\014\075" +
    "\015\107\042\100\043\072\044\067\045\104\050\112\051" +
    "\111\061\106\001\002\000\004\042\161\001\002\000\064" +
    "\002\uffb9\010\uffb9\011\uffb9\020\uffb9\021\uffb9\022\uffb9\024" +
    "\uffb9\025\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9\065\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\072\uffb9\073\uffb9\074\uffb9\001\002" +
    "\000\004\070\163\001\002\000\064\002\uffba\010\uffba\011" +
    "\uffba\020\uffba\021\uffba\022\uffba\024\uffba\025\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\057\uffba\060" +
    "\uffba\062\uffba\063\uffba\065\uffba\066\uffba\067\uffba\070\uffba" +
    "\072\uffba\073\uffba\074\uffba\001\002\000\056\002\uffbc\010" +
    "\uffbc\011\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\057" +
    "\uffbc\060\uffbc\062\uffbc\063\uffbc\065\uffbc\066\uffbc\070\uffbc" +
    "\072\uffbc\001\002\000\064\002\uffb8\010\uffb8\011\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\057\uffb8\060\uffb8\062" +
    "\uffb8\063\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\072\uffb8" +
    "\073\uffb8\074\uffb8\001\002\000\056\002\uffbf\010\uffbf\011" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\057\uffbf\060" +
    "\uffbf\062\uffbf\063\uffbf\065\uffbf\066\uffbf\070\uffbf\072\uffbf" +
    "\001\002\000\016\002\uffd9\021\uffd9\022\uffd9\025\uffd9\063" +
    "\uffd9\072\uffd9\001\002\000\004\072\171\001\002\000\020" +
    "\002\ufff2\021\ufff2\022\ufff2\025\ufff2\046\ufff2\063\ufff2\072" +
    "\ufff2\001\002\000\004\061\174\001\002\000\004\071\021" +
    "\001\002\000\022\004\027\005\040\006\033\007\036\027" +
    "\034\030\043\032\041\042\037\001\002\000\006\062\ufff3" +
    "\065\203\001\002\000\006\042\200\075\177\001\002\000" +
    "\004\042\202\001\002\000\006\062\ufff5\065\ufff5\001\002" +
    "\000\006\062\ufff7\065\ufff7\001\002\000\006\062\ufff6\065" +
    "\ufff6\001\002\000\022\004\027\005\040\006\033\007\036" +
    "\027\034\030\043\032\041\042\037\001\002\000\004\062" +
    "\205\001\002\000\004\071\ufff8\001\002\000\006\062\ufff3" +
    "\065\203\001\002\000\004\062\ufff4\001\002\000\006\046" +
    "\ufff9\063\ufff9\001\002\000\004\042\212\001\002\000\006" +
    "\046\ufffa\063\ufffa\001\002\000\004\002\000\001\002\000" +
    "\030\012\071\013\110\014\075\015\107\042\100\043\072" +
    "\044\067\045\104\050\112\051\111\061\106\001\002\000" +
    "\016\002\uffdf\021\uffdf\022\uffdf\025\uffdf\063\uffdf\072\uffdf" +
    "\001\002\000\016\002\uffdb\021\uffdb\022\uffdb\025\uffdb\063" +
    "\uffdb\072\uffdb\001\002\000\004\020\220\001\002\000\026" +
    "\017\013\023\007\026\006\033\022\034\023\035\004\036" +
    "\014\037\025\042\015\071\021\001\002\000\006\021\222" +
    "\022\223\001\002\000\026\017\013\023\007\026\006\033" +
    "\022\034\023\035\004\036\014\037\025\042\015\071\021" +
    "\001\002\000\016\002\uffd5\021\uffd5\022\uffd5\025\uffd5\063" +
    "\uffd5\072\uffd5\001\002\000\016\002\uffde\021\uffde\022\uffde" +
    "\025\uffde\063\uffde\072\uffde\001\002\000\004\022\226\001" +
    "\002\000\016\002\uffd4\021\uffd4\022\uffd4\025\uffd4\063\uffd4" +
    "\072\uffd4\001\002\000\026\017\013\023\007\026\006\033" +
    "\022\034\023\035\004\036\014\037\025\042\015\071\021" +
    "\001\002\000\006\002\001\072\001\001\002\000\004\024" +
    "\232\001\002\000\026\017\013\023\007\026\006\033\022" +
    "\034\023\035\004\036\014\037\025\042\015\071\021\001" +
    "\002\000\004\025\234\001\002\000\016\002\uffdd\021\uffdd" +
    "\022\uffdd\025\uffdd\063\uffdd\072\uffdd\001\002\000\004\061" +
    "\236\001\002\000\032\012\071\013\110\014\075\015\107" +
    "\042\100\043\072\044\067\045\104\050\112\051\111\061" +
    "\106\062\uffd1\001\002\000\016\002\uffd7\021\uffd7\022\uffd7" +
    "\025\uffd7\063\uffd7\072\uffd7\001\002\000\006\062\uffcf\065" +
    "\243\001\002\000\004\062\242\001\002\000\016\002\uffd3" +
    "\021\uffd3\022\uffd3\025\uffd3\063\uffd3\072\uffd3\001\002\000" +
    "\030\012\071\013\110\014\075\015\107\042\100\043\072" +
    "\044\067\045\104\050\112\051\111\061\106\001\002\000" +
    "\004\062\uffd2\001\002\000\006\062\uffcf\065\243\001\002" +
    "\000\004\062\uffd0\001\002\000\026\017\013\023\007\026" +
    "\006\033\022\034\023\035\004\036\014\037\025\042\015" +
    "\071\021\001\002\000\014\002\uffe2\021\uffe2\022\uffe2\025" +
    "\uffe2\072\uffe2\001\002\000\014\002\uffe1\021\uffe1\022\uffe1" +
    "\025\uffe1\072\uffe1\001\002\000\016\002\uffdc\021\uffdc\022" +
    "\uffdc\025\uffdc\063\uffdc\072\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\016\002\015\003\007\005\023\012\011\022" +
    "\010\024\004\001\001\000\024\031\251\032\104\034\102" +
    "\036\101\040\100\042\076\043\075\046\073\047\072\001" +
    "\001\000\004\023\247\001\001\000\002\001\001\000\024" +
    "\031\230\032\104\034\102\036\101\040\100\042\076\043" +
    "\075\046\073\047\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\031\216\032\104\034" +
    "\102\036\101\040\100\042\076\043\075\046\073\047\072" +
    "\001\001\000\024\031\215\032\104\034\102\036\101\040" +
    "\100\042\076\043\075\046\073\047\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\027\014\210\015" +
    "\031\016\034\021\030\001\001\000\002\001\001\000\016" +
    "\002\167\003\007\005\023\012\011\022\010\024\004\001" +
    "\001\000\024\031\166\032\104\034\102\036\101\040\100" +
    "\042\076\043\075\046\073\047\072\001\001\000\024\031" +
    "\067\032\104\034\102\036\101\040\100\042\076\043\075" +
    "\046\073\047\072\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\014\013\027\014\041\015\031\016\034" +
    "\021\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\027\014\051\015\031" +
    "\016\034\021\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\027\014\047\015\031\016\034\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\027\014\053\015\031\016\034\020\054\021" +
    "\030\001\001\000\002\001\001\000\004\017\056\001\001" +
    "\000\016\013\027\014\053\015\031\016\034\020\060\021" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\065\005\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\165\043\075\046\073\047\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\154\045\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\145\053\150" +
    "\001\001\000\002\001\001\000\006\037\135\051\136\001" +
    "\001\000\006\035\123\050\125\001\001\000\004\033\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\032" +
    "\114\034\102\036\101\040\100\042\076\043\075\046\073" +
    "\047\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\113\047\072\001\001\000\010\043\112\046\073" +
    "\047\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\034\122\036\101" +
    "\040\100\042\076\043\075\046\073\047\072\001\001\000" +
    "\002\001\001\000\022\032\121\034\102\036\101\040\100" +
    "\042\076\043\075\046\073\047\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\036\127\040\100\042\076\043\075\046\073\047" +
    "\072\001\001\000\002\001\001\000\006\035\130\050\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\143\001\001\000\004\052\142\001\001" +
    "\000\002\001\001\000\014\040\137\042\076\043\075\046" +
    "\073\047\072\001\001\000\006\037\140\051\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\042\151\043\075\046" +
    "\073\047\072\001\001\000\006\041\152\053\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\163\045\155\001\001\000\024\031\161\032\104" +
    "\034\102\036\101\040\100\042\076\043\075\046\073\047" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\172\001\001\000\004\012" +
    "\207\001\001\000\016\007\174\013\027\014\175\015\031" +
    "\016\034\021\030\001\001\000\004\011\203\001\001\000" +
    "\004\010\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\205\013" +
    "\027\014\175\015\031\016\034\021\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\031\214\032\104\034" +
    "\102\036\101\040\100\042\076\043\075\046\073\047\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\011\022\220\024\004\001\001\000\004" +
    "\025\223\001\001\000\010\012\011\022\224\024\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\011\022\227\024\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\011" +
    "\022\232\024\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\236\001\001\000\026\027\240\031\237" +
    "\032\104\034\102\036\101\040\100\042\076\043\075\046" +
    "\073\047\072\001\001\000\002\001\001\000\004\030\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\031" +
    "\244\032\104\034\102\036\101\040\100\042\076\043\075" +
    "\046\073\047\072\001\001\000\002\001\001\000\004\030" +
    "\245\001\001\000\002\001\001\000\010\012\011\022\250" +
    "\024\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Decs SEPARACION Instrs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= Instrs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= Dec restoDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // restoDec ::= PTOCOMA Decs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // restoDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC ID paramForm bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramForm ::= PAP paramFormD LparamForm PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramForm",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramFormD ::= tipo restParamFormD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("paramFormD",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // restParamFormD ::= AMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restParamFormD",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // restParamFormD ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restParamFormD",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LparamForm ::= COMA paramFormD LparamForm 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LparamForm",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LparamForm ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LparamForm",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bloque ::= LLAP Programa LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoBas ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBas",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoBas ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBas",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoBas ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBas",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipoBas ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipoBas",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= tipoBas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= tarray 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= trecord 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= tpointer 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tarray ::= PARRAY CORAP NENTERO CORCIE OF tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tarray",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // trecord ::= RECORD LLAP campo campos LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("trecord",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // campos ::= PTOCOMA campo campos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // campos ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // campo ::= tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tpointer ::= POINTER tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tpointer",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instrs ::= Instr restoIns 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrs",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // restoIns ::= PTOCOMA Instrs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoIns",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // restoIns ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoIns",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instr ::= ID IGUAL expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instr ::= IF expr THEN Instrs restoIf 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instr ::= WHILE expr DO Instrs ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instr ::= READ expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instr ::= WRITE expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instr ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instr ::= NEW expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instr ::= DELETE expr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instr ::= CALL ID parReales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instr ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instr",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // restoIf ::= ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoIf",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // restoIf ::= ELSE Instrs ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoIf",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parReales ::= PAP ExpresionesOp PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parReales",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionesOp ::= expr LExpresiones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionesOp",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionesOp ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ExpresionesOp",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LExpresiones ::= COMA expr LExpresiones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExpresiones",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LExpresiones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LExpresiones",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expr",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E1 restoE0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // restoE0 ::= RESTA E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoE0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // restoE0 ::= SUMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoE0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // restoE0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restoE0",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 Rest2E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Rest2E1 ::= op1AI E2 Rest2E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Rest2E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rest2E1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Rest2E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 Rest2E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Rest2E2 ::= op2AI E3 Rest2E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Rest2E2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Rest2E2 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Rest2E2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 restE3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // restE3 ::= op3NA E4 restE3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restE3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // restE3 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("restE3",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= RESTA E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E5 ::= E6 Resto2E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Resto2E5 ::= RestoE5 Resto2E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Resto2E5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Resto2E5 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Resto2E5",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RestoE5 ::= CORAP expr CORCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RestoE5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RestoE5 ::= PNTO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RestoE5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RestoE5 ::= FLECHA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RestoE5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E6 ::= MUL E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E7 ::= PAP E0 PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E7 ::= NENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E7 ::= NREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= LITCAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op1AI ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1AI",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op1AI ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1AI",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op2AI ::= MAY resto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op2AI ::= MEN resto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op2AI ::= EQUIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op2AI ::= DIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op2AI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // resto ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("resto",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // resto ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("resto",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op3NA ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3NA",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op3NA ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3NA",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // op3NA ::= PORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op3NA",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

